<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xsd:include schemaLocation="txn_common.xsd"/>
    <xsd:annotation>
        <xsd:documentation><![CDATA[Second message of the Lookup/Authenticate pair used in processing Payer Authentication, PayPal and SECURE-eBill transactions. The PARes values are POSTed to the TermURL from the external systems involved in processing the transactions. The webpage represented by the TermURL should retrieve the PARes value from the HTTP Request object for use in creating this message.
	<br/><br/>
	<b>Payer Authentication</b>
	<br/>
	The message is used to communicate the PARes generated by the Issuer ACS software to the Centinel. Centinel will verify the digital 
	signature within the PARes to validate that the authentication results were properly generated and not altered. The authentication data values including the transaction status, XID, CAVV/AAV and the ECI are extracted from the PARes and returned to the merchant on the response message. 
	<br/><br/>
	<b>PayPal Payments</b>
	<br/>
	The PaRes value will be passed on the PAResPayload field. Centinel will determine the outcome of the PayPal payment and return the results on the response message.
	<br/><br/>
	<b>SECURE-eBill Payments</b>
	<br/>
	The PaRes value will be passed on the PAResPayload field. Centinel will determine the outcome of the SECURE-eBill payment and return the results on the response message.
	<br/><br/>

	]]>
	</xsd:documentation>
    </xsd:annotation>
	<xsd:element name="CardinalMPI">
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="Version" type="applicationVersion"/>
				<xsd:element name="MsgType">
					<xsd:annotation>
						<xsd:documentation>"cmpi_authenticate"</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="cmpi_authenticate"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:element>

				<xsd:element name="ProcessorId" type="processorId"/>
				<xsd:element name="MerchantId" type="merchantId"/>
				<xsd:element name="TransactionType" type="transactionType"/>
				<xsd:element name="TransactionPwd" type="merchantTxnPwd"/>
				<xsd:element name="TransactionId" type="txnId"/>
				<xsd:element name="PAResPayload" type="paResPayload"/>
			</xsd:all>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
